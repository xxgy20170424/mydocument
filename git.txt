丑奴儿・书博山道中壁

作者：辛弃疾

少年不识愁滋味，爱上层楼。爱上层楼。为赋新词强说愁。
而今识尽愁滋味，欲说还休。欲说还休。却道天凉好个秋。
____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Git&GitHub

1 版本控制工具应该具有的功能

1.1协同修改

多人并行不悖的修改服务器端的同一个文件

1.2数据备份

不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。

1.3版本管理
在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方面 SVN 采用的是增量式管理的方式，而 Git 采取了文件系统快照的方式。

1.4权限控制
对团队中参与开发的人员进行权限控制。
对团队外开发者贡献的代码进行审核――Git 独有。

1.5历史记录
查看修改人、修改时间、修改内容、日志信息。
将本地文件恢复到某一个历史状态。

1.6分支管理
允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。


集中式版本控制工具
	CVS、SVN、VSS、...

分布式版本控制工具
	Git、Mercurial、Bazaar、Darcs、...


Git的优势
	大部分在本地完成，不需要联网
	完整性保存
	尽可能添加数据而不是删除或修改数据
	分支操作非常快捷流畅
	与Linux命令全面兼容


hash值可以验证其是否一致



______________________________________________________________________________________________________________________

工作区：编写代码的保存目录
-> git add 文件名
暂存区：临时存储
-> git commit 文件名
本地库：历史版本


远程库(也称代码托管中心,即云服务)

局域网环境 
gitlab服务器

外网环境网
github和码云


团队开发的两种方式:

①团队内部协作:
工作区 -> git add ->暂存区 -> git commit ->本地库 -> push -> github1 -> pull -> 本地库


②跨团队协作:
github1 -> fork -> github2 -> pull request -> 审核 -> merge -github1


pull：从github下载到本地
push；从本地上传到github
clone: 表示克隆



______________________________________________________________________________________________________________________

2 本地库操作

2.1基本命令操作

git init
初始化
可以查看到当前目录下的.git目录

pwd
查看当前目录根路径

ls -lA
查看包含隐藏的目录

ll .git/
查看.git目录下的子目录（切记不可随意修改或删除）

.git目录下的子目录：
(即本地库相关的子目录和文件)

config
description
HEAD
hooks/
info/
objects/
refs/

___________________________________________________________
2.2设置签名

格式：
用户名：song
Email地址：song007@atguigu.com

作用：
为了区分不同开发人员的身份

辨析：
这里的签名和登录远程库(代码托管中心)的账号 、密码没有任何关系

命令：
级别：
①项目级别(即仓库级别)：仅在当前本地库范围内有效

git config user.name 用户名
git config user.email 邮箱地址
查看信息保存的位置：cat .git/config


②系统用户级别：登录当前操作系统的用户范围

git config --global user.name 用户名
git config --global user.email 邮箱地址
查看信息保存的位置：
cd ~
cat .gitconfig

级别优先级(就近原则)：
①项目级别优先于系统用户级别，二者都有时采用项目级别的签名
②如果只有系统用户级别的签名，就以系统用户级别的签名为准
③二者都没有，是不允许的
___________________________________________________________
2.3提交命令

cd 进入到工程目录下

git status
当前库状态

vim 新建一个文件

git status

①git add 文件名
将工作区的文件提交到暂存区

git status

git rm --cached 文件名
撤回刚才提交到暂存区的文件

②git commit 文件名
将文件提交到本地库

③cat 文件名
查看文件内容1


④git commit -m "描述" 文件名
提交本地库，并描述

___________________________________________________________

2.4版本的前进和后退

①最完整的查看历史记录
git log
查看版本的历史记录：包括提交的记录，作者，时间，哈希值(即对应的每次提交的版本号，能够根据该值恢复到之前提交代码时的状态)
多屏显示控制时：
空格向下翻页
b向上翻页
q退出

②较为完整的显示，哈希值完整
git log --pretty=oneline

③更简洁的方式，显示部分哈希值
git log --oneline


④更加简介的方式，HEAD@{移动到当前版本的步数}
git reflog

HEAD相当于指针，指向当前版本

⑤去到指定版本（方式一）
git reset --hard 部分哈希值
移动到指定哈希值的历史版本
cat 文件名
查看文件指定哈希值历史版本的内容

⑥^符号查看版本

^：代表从现在版本往后回退，一个代表回退一个版本
git log reset --hard HEAD^

~：加上数值表示退回几步
git log reset --hard HEAD~数（写几就后退几步）


⑦查看版本
git reflog
查看所有提交版本

git log --oneline
查看当前版本及之前的版本

⑧reset命令的三个参数: soft mixed hard

soft
仅仅在本地库移动HEAD指针

mixed
在本地库移动HEAD指针
重置暂存区

hard
在本地库移动HEAD指针
重置暂存区
重置工作区

___________________________________________________________

2.5删除命令

rm 文件名

git add 文件名

git commit -m "描述" 文件名

git status

注意：
文件可以被删除，但是所有历史版本或者提交记录是无法被删除的


删除文件并找回
前提：删除前，文件在时的状态提交到了本地库
操作：git reset --hard 哈希值
①删除操作已经提交到本地库：指针位置指向历史记录
②删除操作尚未提交到本地库：指针位置使用HEAD

___________________________________________________________

2.6比较文件

git diff 文件名
将工作区中的文件和暂存区进行比较

git diff 本地库中历史版本 文件名
将工作区中的文件和本地库历史记录比较


不带文件名比较多个文件

___________________________________________________________

2.7分支操作

git branch 分支名
创建分支

git branch -v
查看分支

git checkout 分支名
切换分支

git checkout 将要合并到的分支名
git merge 有新内容的分支名
合并分支

解决冲突
当修改同一个文件，同一个位置的时候：
第一步：
vim file1(默认的master分支)
git add file1
git commit -m "描述" file1 
git branch -v

第二步：
git checkout 分支名1 
vim file1(默认的master分支)
git add file1
git commit -m "描述" file1
git branch -v

git merge master //会出现冲突，显示自动合并失败，MERGING

第三步：解决方法
①打开文件，查看冲突的表现
会看见两个修改的分支都在其中，需要我们删掉或者编辑到我们需要的状态，然后保存退出
vim file1 //人工手动删掉HEAD和master

②通过命令查看状态，会显示当前的冲突情况
git status

③再提交到暂存区，即把冲突标记为已解决
git add file1

④再次查看状态
git status

⑤最后不要带文件名提交到本地库
git commit -m "描述" //后面不能加上具体的文件名

⑥再次查看状态
git status
___________________________________________________________

2.8工作原理（Git）

哈希值

明文----------->加密算法----------->密文

哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点：

①不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。

②哈希算法确定，输入数据确定，输出数据能够保证不变

③哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大

④哈希算法不可逆

Git底层采用的是 SHA-1 算法。



______________________________________________________________________________________________________________________

3 远程库操作


3.1在GitHub中创建一个项目

mydocument
https://github.com/xxgy20170424/mydocument.git



第一步：

git remote -v
查看当前所有远程地址别名

git remote add 别名 远程地址
创建一个远程库地址别名

git remote set-url origin-name origin-url
修改

git remote rm origin-name
删除

第二步：

git push 别名 分支名
将本地库的文本提交到远程库

第三步:

git clone https地址
将github上的项目完整的克隆到本地


第四步：

拉取github上的提交的文档
pull = fetch+merge

①抓取操作，并没有更改本地文本
git fetch origin master

②切换到抓取下来的master目录中
git chechout origin/master

③即可查看到抓取下来的新的内容
cat 文件名

④切换回本地master,此时查看还是原来的文本
git chechout master

⑤通过抓取检验确认后，即可合并，此时就更改了
git merge origin/master
______________________________________________________________________________________________________________________

关于远程库，协作开发时，发生冲突解决方法

第一步:
先在song520641本地修改上传

vim a.txt
在其中某一处最末尾添加信息

git add

git commit

git push origin master

第二步：

进入到xxgy20170424同样修改同一处

vim a.txt
同一处，在末尾添加不一样的信息

git add

git commit

git pull origin master
进行合并上传

第三步：
vim a.txt
将其中的合并样子修改成我们需要的样子

git add

git commit

git push origin master

第四步：

回到song520641本地库下

进行抓取合并即可看见刚才冲突的最后解决

git fetch origin master

git checkout origin/master

cat a.txt

git checkout master

git merge origin/master

cat a.txt

完毕！



____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________










